CREATE TABLE EMPLOYEEDETAILS
(
	EMPLOYEEID INT PRIMARY KEY,
	EMPLOYEENAME VARCHAR(100) NOT NULL,
	CONTACTNO VARCHAR(100) NOT NULL,
	DEPARTMENT VARCHAR(100) NOT NULL,
	SALARY DECIMAL(10,2) NOT NULL,
	JOININGDATE DATE
)
SELECT * FROM EMPLOYEEDETAILS
CREATE TABLE EMPLOYEELOGS
(
	LOGID INT PRIMARY KEY IDENTITY(1,1),
	EMPLOYEEID INT NOT NULL,
	EMPLOYEENAME VARCHAR(100) NOT NULL,
	ACTIONPERFORMED VARCHAR(100) NOT NULL,
	ACTIONDATE DATE NOT NULL
)
SELECT * FROM EMPLOYEELOGS

CREATE TABLE MOVIES
(
	MOVIE_ID INT PRIMARY KEY,
	MOVIE_TITLE VARCHAR(255) NOT NULL,
	MOVIE_RELEASE_YEAR INT NOT NULL,
	GENRE VARCHAR(100) NOT NULL,
	RATING DECIMAL(3,1) NOT NULL,
	DURATION INT NOT NULL,
)


CREATE TABLE MOVIES_LOG
(
	LOG_ID INT PRIMARY KEY IDENTITY(1,1),
	MOVIE_ID INT NOT NULL,
	MOVIE_TITLE VARCHAR(255) NOT NULL,
	ACTION_PERFORMED VARCHAR(100) NOT NULL,
	ACTION_DATE DATETIME NOT NULL
)

-- PART A::
-- 1.
CREATE TRIGGER EMPLOYEEDETAILS_MSG
ON EMPLOYEEDETAILS
AFTER INSERT , UPDATE , DELETE
AS
BEGIN
	PRINT 'EMPLOYEE RECORD IS AFFECTED.'
END

-- 2.
CREATE TRIGGER EMPLOYEEDETAILS_INSERTED_TRIGGER
ON EMPLOYEEDETAILS
AFTER INSERT , UPDATE
AS
BEGIN
	DECLARE @PID INT , @PNAME VARCHAR(250)
	SELECT @PID = EMPLOYEEID FROM INSERTED
	SELECT @PNAME = EMPLOYEENAME FROM INSERTED
	INSERT INTO EMPLOYEELOGS VALUES(@PID , @PNAME , ERROR_MESSAGE(), GETDATE())
END

CREATE TRIGGER EMPLOYEEDETAILS_DELETED_TRIGGER
ON EMPLOYEEDETAILS
AFTER DELETE
AS
BEGIN
	DECLARE @PID INT , @PNAME VARCHAR(250)
	SELECT @PID = EMPLOYEEID FROM DELETED
	SELECT @PNAME = EMPLOYEENAME FROM DELETED
	INSERT INTO EMPLOYEELOGS VALUES(@PID , @PNAME , ERROR_MESSAGE(), GETDATE())
END

-- 3.
CREATE TRIGGER EMPLOYEE_DETAILS_TRIGGSALARY
ON EMPLOYEEDETAILS 
FOR INSERT
AS
BEGIN
	DECLARE @ESALARY DECIMAL(8,2)
	SELECT @ESALARY = SALARY FROM INSERTED
	SET @ESALARY = @ESALARY*1.1
	UPDATE EMPLOYEEDETAILS SET SALARY = @ESALARY FROM EMPLOYEEDETAILS
END
SELECT * FROM EMPLOYEEDETAILS
INSERT INTO EMPLOYEEDETAILS VALUES (101 , 'FDSF' , '0123456789' , 'CE' , 10000 , '1995-02-01')

-- PART B ::

-- 1.
CREATE TRIGGER EMPLOYEEDETAILS_TRIGGER_JOININGDATE
ON EMPLOYEEDETAILS
AFTER INSERT
AS
BEGIN
	DECLARE @JOININGDATE DATE
	SELECT @JOININGDATE = JOININGDATE FROM INSERTED
	IF (@JOININGDATE IS NULL)
	BEGIN
		SET @JOININGDATE = GETDATE()
		UPDATE EMPLOYEEDETAILS SET JOININGDATE = @JOININGDATE FROM EMPLOYEEDETAILS
	END
END



-- PART C ::
-- 1.
CREATE TRIGGER EMPLOYEEDETAILS_TRIGGER_CONTACTNO
ON EMPLOYEEDETAILS
INSTEAD OF INSERT , UPDATE
AS
BEGIN
	DECLARE @CONTACTNO VARCHAR(100)
	SELECT @CONTACTNO = CONTACTNO FROM INSERTED
	IF (LEN(@CONTACTNO) != 10)
	BEGIN
		PRINT 'LENGTH IS NOT 10.'
	END
	ELSE
	BEGIN
		INSERT INTO EMPLOYEEDETAILS SELECT * FROM INSERTED
	END
END

SELECT * FROM EMPLOYEEDETAILS
INSERT INTO EMPLOYEEDETAILS VALUES (101 , 'FDSF' , '0123456789' , 'CE' , 10000 , '1995-02-01')


-- INSTEAD OF TRIGGER --
-- PART A::
-- 1.

CREATE TRIGGER LOG_INSTEADOF_INSDELUPD
ON MOVIES
INSTEAD OF INSERT  , UPDATE
AS
BEGIN
	DECLARE @M_ID INT , @M_NAME VARCHAR(255)
	SELECT @M_ID = MOVIE_ID FROM INSERTED
	SELECT @M_NAME = MOVIE_TITLE FROM INSERTED
	INSERT INTO MOVIES_LOG VALUES (@M_ID,@M_NAME,ERROR_MESSAGE(), GETDATE())
END

CREATE TRIGGER LOG_INSTEADOF_DELETE
ON MOVIES
INSTEAD OF DELETE
AS
BEGIN
	DECLARE @M_ID INT , @M_NAME VARCHAR(255)
	SELECT @M_ID = MOVIE_ID FROM DELETED
	SELECT @M_NAME = MOVIE_TITLE FROM DELETED
	INSERT INTO MOVIES_LOG VALUES (@M_ID,@M_NAME,ERROR_MESSAGE(), GETDATE())
END


SELECT * FROM MOVIES
SELECT * FROM MOVIES_LOG

-- 2.
CREATE TRIGGER LOG_INSTEADOF_CON1
ON MOVIES
INSTEAD OF INSERT
AS
BEGIN
	DECLARE @M_RATING DECIMAL(3,1)
	SELECT @M_RATING = RATING FROM INSERTED
	IF(@M_RATING>5.5)
	BEGIN
		INSERT INTO MOVIES SELECT * FROM INSERTED
	END
	ELSE
	BEGIN
		PRINT 'RECORD INVALID'
	END
END

-- 3.
CREATE TRIGGER MOVIE_TITLE_DUPLICATE
ON MOVIES
INSTEAD OF INSERT
AS
BEGIN
	DECLARE @M_NAME VARCHAR(250)
	SELECT @M_NAME = MOVIE_TITLE FROM INSERTED
	IF EXISTS (SELECT MOVIE_TITLE FROM MOVIES WHERE MOVIE_TITLE = @M_NAME)
	BEGIN
		PRINT 'DUPLICATED RECORD FOUND'
	END
	ELSE
	BEGIN
		INSERT INTO MOVIES SELECT * FROM INSERTED
	END
END

-- PART B
-- 1.
CREATE TRIGGER PREVENT_PRERELEASE_MOVIES
ON MOVIES
INSTEAD OF INSERT
AS
BEGIN
	DECLARE @Y INT
	SELECT @Y = MOVIE_RELEASE_YEAR FROM INSERTED
	IF (@Y > YEAR(GETDATE()))
	BEGIN
		PRINT 'MOVIE IS PRE-RELEASED'
	END
	ELSE
	BEGIN
		INSERT INTO MOVIES SELECT * FROM INSERTED
	END
END

-- PART C
-- 1.

CREATE TRIGGER MOVIE_DURATION_UPDLIMIT
ON MOVIES
INSTEAD OF UPDATE
AS
BEGIN
	DECLARE @M_DUR INT
	SELECT @M_DUR = DURATION FROM INSERTED
	IF @M_DUR > 120
	BEGIN
		PRINT 'CANNOT BE PERMITTED'
	END
	ELSE
	BEGIN
		INSERT INTO MOVIES SELECT * FROM INSERTED
	END
END
