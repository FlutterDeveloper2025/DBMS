CREATE TABLE PERSON_INFO(
	P_ID INT PRIMARY KEY,
	P_NAME VARCHAR(100) NOT NULL,
	P_SALARY DECIMAL(8,2) NOT NULL,
	P_JOINING_DATE DATETIME,
	P_CITY VARCHAR(100) NOT NULL,
	P_AGE INT,
	P_DOB Date NOT NULL
)


CREATE TABLE PERSON_LOG
(
	P_LOGID INT PRIMARY KEY IDENTITY(1,1),
	P_ID INT NOT NULL,
	P_NAME VARCHAR(250) NOT NULL,
	OPERATION VARCHAR(50) NOT NULL,
	UPDATEDATE DATETIME NOT NULL
)

CREATE TABLE PERSON_LOG(
	PLOG_ID INT PRIMARY KEY IDENTITY(1,1),
	P_ID INT NOT NULL,
	P_NAME NVARCHAR(100) NOT NULL,
	OPERATION VARCHAR(50) NOT NULL,
	UPDATEDATE DATETIME NOT NULL
)


-- PART A:
-- 1.
CREATE TRIGGER INS_DEL_UPD
ON PERSON_INFO
FOR INSERT,UPDATE,DELETE
AS
BEGIN
	PRINT 'RECORD AFFECTED'
END

-- INSERT QUERY --
INSERT INTO PERSON_INFO VALUES
(101,'JOHN',250000,'2020-05-20','RAJKOT',20,'2006-11-20')
-- UPDATE QUERY --
UPDATE PERSON_INFO SET P_NAME = 'NEEL' WHERE P_ID=101
-- DELETE QUERY --
DELETE FROM PERSON_INFO WHERE P_ID=101

-- 2.
CREATE TRIGGER PERSON_INSERTED
ON PERSON_INFO
FOR INSERT,UPDATE
AS
BEGIN
	DECLARE @PID INT,@PNAME VARCHAR(250)
	SELECT @PID = P_ID FROM INSERTED
	SELECT @PNAME = P_NAME FROM INSERTED
	INSERT INTO PERSON_LOG VALUES(@PID,@PNAME,ERROR_MESSAGE(),GETDATE())
END


CREATE TRIGGER PSERONS_DELETED
ON PERSON_INFO
FOR DELETE
AS
BEGIN
	DECLARE @PID INT,@PNAME VARCHAR(250)
	SELECT @PID = P_ID FROM DELETED
	SELECT @PNAME = P_NAME FROM DELETED
	INSERT INTO PERSON_LOG VALUES(@PID,@PNAME,ERROR_MESSAGE(),GETDATE())
END

SELECT * FROM PERSON_INFO

-- 3.
CREATE TRIGGER PERSON_OPERATION_LOG1
ON PERSON_INFO
INSTEAD OF INSERT , UPDATE 
AS
BEGIN 
	DECLARE @PID INT , @PNAME VARCHAR(250)
	SELECT @PID FROM INSERTED 
	SELECT @PNAME FROM INSERTED 
	INSERT INTO PERSON_LOG VALUES (@PID , @PNAME , ERROR_MESSAGE(), GETDATE())
END


CREATE TRIGGER PERSON_OPERATION_LOG2
ON PERSON_INFO
INSTEAD OF DELETE
AS
BEGIN 
	DECLARE @PID INT , @PNAME VARCHAR(250)
	SELECT @PID FROM INSERTED 
	SELECT @PNAME FROM INSERTED 
	INSERT INTO PERSON_LOG VALUES (@PID , @PNAME , ERROR_MESSAGE(), GETDATE())	
END

SELECT * FROM PERSON_INFO

-- 4.
CREATE TRIGGER INS_PERSON_INFO
ON PERSON_INFO
FOR INSERT
AS
BEGIN
	DECLARE @PNAME VARCHAR(250)
	SELECT @PNAME = P_NAME FROM INSERTED
	UPDATE PERSON_INFO SET P_NAME = UPPER(@PNAME) FROM PERSON_INFO
END

SELECT * FROM PERSON_INFO
INSERT INTO PERSON_INFO VALUES (102,'abc',10000,'1995-02-03','Rajkot',20,'2006-11-20')

-- 5.
CREATE TRIGGER INS_PERSON_INFO_DUPLICATE
ON PERSON_INFO
INSTEAD OF INSERT
AS
BEGIN
	DECLARE @P_NAME VARCHAR(250)
	SELECT @P_NAME = P_NAME FROM INSERTED
	IF EXISTS (SELECT P_NAME FROM PERSON_INFO WHERE P_NAME = @P_NAME)
	BEGIN
		PRINT 'DUPLICATED RECORD FOUND'
	END
	ELSE
	BEGIN
		INSERT INTO PERSON_INFO SELECT * FROM INSERTED
	END
END

SELECT * FROM PERSON_INFO
INSERT INTO PERSON_INFO VALUES (102,'abc',10000,'1995-02-03','Rajkot',20,'2006-11-20')

--6.
CREATE TRIGGER INS_PERSON_INFO_AGE
ON PERSON_INFO
INSTEAD OF INSERT
AS
BEGIN
	DECLARE @P_AGE INT
	SELECT @P_AGE = P_AGE FROM INSERTED
	IF @P_AGE<18
	BEGIN
		PRINT 'CANNOT BE INSERTED'
	END
	ELSE
	BEGIN
		INSERT INTO PERSON_INFO SELECT * FROM INSERTED
	END
END

INSERT INTO PERSON_INFO VALUES (104,'abc',10000,'1995-02-03','Rajkot',17,'2006-11-20')


-- PART B:
-- 1.

ALTER TRIGGER INS_PERSON_CAL_AGE
ON PERSON_INFO
AFTER INSERT
AS
BEGIN
	DECLARE @PAGE DATE , @NEW INT
	SELECT @PAGE = P_DOB FROM INSERTED
	SET @NEW = DATEDIFF(YEAR , @PAGE , GETDATE())
	UPDATE PERSON_INFO SET P_AGE = @NEW FROM PERSON_INFO
END
SELECT * FROM PERSON_INFO
INSERT INTO PERSON_INFO VALUES (105,'GAUTAM',10000,'1995-02-03','Rajkot',50,'2007-01-22')

-- 2.
